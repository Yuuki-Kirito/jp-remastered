package l1j.server.server.serverpackets;

import l1j.server.server.Opcodes;

public class S_NewDollcon extends ServerBasePacket {

	private static final String S_NewDollcon = "[S] S_NewDollcon";
	
	//b4 11 09 08 88 0e 10 8c 	31 18 f9 be ef 2f 22 06 
	// 58 06 67 00 23 02 e1 77 	
/*	
	b4 77 00 08 b0 80 96 83 	08 10 d4 b7 f0 2f 18 90 
	50 20 00 28 00 30 00 38 	01 40 d8 ff ff ff ff ff 
	ff ff ff 01 4a 06 24 31 	32 38 35 34 52 00 58 01 
	60 00 68 00 70 00 78 00 	80 01 00 88 01 00 90 01 
	00 98 01 00 a2 01 00 aa 	01 06 b9 ab b0 a3 b4 d9 
	b0 01 02 b8 01 ff ff ff 	ff ff ff ff ff ff 01 c0 
	01 25 d0 01 ff ff ff ff 	ff ff ff ff ff 01 d8 01 
	00 e0 01 02 f0 01 ff ff 	ff ff ff ff ff ff ff 01 
	80 02 00 98 02 00 b8 02 	8c 31 00 38 */


	public S_NewDollcon() {
		writeC(Opcodes.S_EXTENDED_PROTOBUF);
		writeH(0x77);
		writeC(0x08);
		writeC(0xb0);
		writeC(0x80);
		writeC(0x96);
		writeC(0x83);
		writeC(0x08);
		writeC(0x10);
		writeC(0xd4);
		writeC(0xb7);		
		writeC(0xf0);
		writeC(0x2f);
		writeC(0x18);
		writeC(0x90);
		writeC(0x50);
		writeH(0x20);
		writeH(0x28);
		writeH(0x30);
		writeC(0x38);
		writeC(0x01);
	}

	public static final int[] hextable = { 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1,
			0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8,
			0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
			0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff };

	private void byteWrite(long value) {
		long temp = value / 128;
		if (temp > 0) {
			writeC(hextable[(int) value % 128]);
			while (temp >= 128) {
				writeC(hextable[(int) temp % 128]);
				temp = temp / 128;
			}
			if (temp > 0)
				writeC((int) temp);
		} else {
			if (value == 0) {
				writeC(0);
			} else {
				writeC(hextable[(int) value]);
				writeC(0);
			}
		}
	}

	@Override
	public byte[] getContent() {
		return getBytes();
	}

	@Override
	public String getType() {
		return S_NewDollcon;
	}
}